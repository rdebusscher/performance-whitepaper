/*
 * This file is generated by jOOQ.
 */
package be.rubus.microstream.performance.jooq.model.tables;


import be.rubus.microstream.performance.jooq.model.Indexes;
import be.rubus.microstream.performance.jooq.model.Keys;
import be.rubus.microstream.performance.jooq.model.Public;
import be.rubus.microstream.performance.jooq.model.tables.records.PurchaseRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Purchase extends TableImpl<PurchaseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.purchase</code>
     */
    public static final Purchase PURCHASE = new Purchase();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PurchaseRecord> getRecordType() {
        return PurchaseRecord.class;
    }

    /**
     * The column <code>public.purchase.id</code>.
     */
    public final TableField<PurchaseRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.purchase.time_stamp</code>.
     */
    public final TableField<PurchaseRecord, LocalDateTime> TIME_STAMP = createField(DSL.name("time_stamp"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.purchase.customer_id</code>.
     */
    public final TableField<PurchaseRecord, Long> CUSTOMER_ID = createField(DSL.name("customer_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.purchase.employee_id</code>.
     */
    public final TableField<PurchaseRecord, Long> EMPLOYEE_ID = createField(DSL.name("employee_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.purchase.shop_id</code>.
     */
    public final TableField<PurchaseRecord, Long> SHOP_ID = createField(DSL.name("shop_id"), SQLDataType.BIGINT, this, "");

    private Purchase(Name alias, Table<PurchaseRecord> aliased) {
        this(alias, aliased, null);
    }

    private Purchase(Name alias, Table<PurchaseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.purchase</code> table reference
     */
    public Purchase(String alias) {
        this(DSL.name(alias), PURCHASE);
    }

    /**
     * Create an aliased <code>public.purchase</code> table reference
     */
    public Purchase(Name alias) {
        this(alias, PURCHASE);
    }

    /**
     * Create a <code>public.purchase</code> table reference
     */
    public Purchase() {
        this(DSL.name("purchase"), null);
    }

    public <O extends Record> Purchase(Table<O> child, ForeignKey<O, PurchaseRecord> key) {
        super(child, key, PURCHASE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_PURCHASE_CUSTOMER_ID, Indexes.IDX_PURCHASE_EMPLOYEE_ID, Indexes.IDX_PURCHASE_SHOP_ID, Indexes.IDX_PURCHASE_TIME_STAMP);
    }

    @Override
    public Identity<PurchaseRecord, Long> getIdentity() {
        return (Identity<PurchaseRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PurchaseRecord> getPrimaryKey() {
        return Keys.PURCHASE_PKEY;
    }

    @Override
    public List<ForeignKey<PurchaseRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PURCHASE__FK_PURCHASE_CUSTOMER, Keys.PURCHASE__FK_PURCHASE_EMPLOYEE, Keys.PURCHASE__FK_PURCHASE_SHOP);
    }

    private transient Customer _customer;
    private transient Employee _employee;
    private transient Shop _shop;

    /**
     * Get the implicit join path to the <code>public.customer</code> table.
     */
    public Customer customer() {
        if (_customer == null)
            _customer = new Customer(this, Keys.PURCHASE__FK_PURCHASE_CUSTOMER);

        return _customer;
    }

    /**
     * Get the implicit join path to the <code>public.employee</code> table.
     */
    public Employee employee() {
        if (_employee == null)
            _employee = new Employee(this, Keys.PURCHASE__FK_PURCHASE_EMPLOYEE);

        return _employee;
    }

    /**
     * Get the implicit join path to the <code>public.shop</code> table.
     */
    public Shop shop() {
        if (_shop == null)
            _shop = new Shop(this, Keys.PURCHASE__FK_PURCHASE_SHOP);

        return _shop;
    }

    @Override
    public Purchase as(String alias) {
        return new Purchase(DSL.name(alias), this);
    }

    @Override
    public Purchase as(Name alias) {
        return new Purchase(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Purchase rename(String name) {
        return new Purchase(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Purchase rename(Name name) {
        return new Purchase(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, LocalDateTime, Long, Long, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
