/*
 * This file is generated by jOOQ.
 */
package be.rubus.microstream.performance.jooq.model;


import be.rubus.microstream.performance.jooq.model.tables.*;
import be.rubus.microstream.performance.jooq.model.tables.records.*;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AddressRecord> ADDRESS_PKEY = Internal.createUniqueKey(Address.ADDRESS, DSL.name("address_pkey"), new TableField[] { Address.ADDRESS.ID }, true);
    public static final UniqueKey<AuthorRecord> AUTHOR_PKEY = Internal.createUniqueKey(Author.AUTHOR, DSL.name("author_pkey"), new TableField[] { Author.AUTHOR.ID }, true);
    public static final UniqueKey<BookRecord> BOOK_PKEY = Internal.createUniqueKey(Book.BOOK, DSL.name("book_pkey"), new TableField[] { Book.BOOK.ID }, true);
    public static final UniqueKey<CityRecord> CITY_PKEY = Internal.createUniqueKey(City.CITY, DSL.name("city_pkey"), new TableField[] { City.CITY.ID }, true);
    public static final UniqueKey<CountryRecord> COUNTRY_PKEY = Internal.createUniqueKey(Country.COUNTRY, DSL.name("country_pkey"), new TableField[] { Country.COUNTRY.ID }, true);
    public static final UniqueKey<CustomerRecord> CUSTOMER_PKEY = Internal.createUniqueKey(Customer.CUSTOMER, DSL.name("customer_pkey"), new TableField[] { Customer.CUSTOMER.ID }, true);
    public static final UniqueKey<EmployeeRecord> EMPLOYEE_PKEY = Internal.createUniqueKey(Employee.EMPLOYEE, DSL.name("employee_pkey"), new TableField[] { Employee.EMPLOYEE.ID }, true);
    public static final UniqueKey<GenreRecord> GENRE_PKEY = Internal.createUniqueKey(Genre.GENRE, DSL.name("genre_pkey"), new TableField[] { Genre.GENRE.ID }, true);
    public static final UniqueKey<InventoryitemRecord> INVENTORYITEM_PKEY = Internal.createUniqueKey(Inventoryitem.INVENTORYITEM, DSL.name("inventoryitem_pkey"), new TableField[] { Inventoryitem.INVENTORYITEM.ID }, true);
    public static final UniqueKey<LanguageRecord> LANGUAGE_PKEY = Internal.createUniqueKey(Language.LANGUAGE, DSL.name("language_pkey"), new TableField[] { Language.LANGUAGE.ID }, true);
    public static final UniqueKey<PublisherRecord> PUBLISHER_PKEY = Internal.createUniqueKey(Publisher.PUBLISHER, DSL.name("publisher_pkey"), new TableField[] { Publisher.PUBLISHER.ID }, true);
    public static final UniqueKey<PurchaseRecord> PURCHASE_PKEY = Internal.createUniqueKey(Purchase.PURCHASE, DSL.name("purchase_pkey"), new TableField[] { Purchase.PURCHASE.ID }, true);
    public static final UniqueKey<PurchaseitemRecord> PURCHASEITEM_PKEY = Internal.createUniqueKey(Purchaseitem.PURCHASEITEM, DSL.name("purchaseitem_pkey"), new TableField[] { Purchaseitem.PURCHASEITEM.ID }, true);
    public static final UniqueKey<ShopRecord> SHOP_PKEY = Internal.createUniqueKey(Shop.SHOP, DSL.name("shop_pkey"), new TableField[] { Shop.SHOP.ID }, true);
    public static final UniqueKey<StateRecord> STATE_PKEY = Internal.createUniqueKey(State.STATE, DSL.name("state_pkey"), new TableField[] { State.STATE.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AddressRecord, CityRecord> ADDRESS__FK_ADDRESS_CITY = Internal.createForeignKey(Address.ADDRESS, DSL.name("fk_address_city"), new TableField[] { Address.ADDRESS.CITY_ID }, Keys.CITY_PKEY, new TableField[] { City.CITY.ID }, true);
    public static final ForeignKey<AuthorRecord, AddressRecord> AUTHOR__FK_AUTHOR_ADDRESS = Internal.createForeignKey(Author.AUTHOR, DSL.name("fk_author_address"), new TableField[] { Author.AUTHOR.ADDRESS_ID }, Keys.ADDRESS_PKEY, new TableField[] { Address.ADDRESS.ID }, true);
    public static final ForeignKey<BookRecord, AuthorRecord> BOOK__FK_BOOK_AUTHOR = Internal.createForeignKey(Book.BOOK, DSL.name("fk_book_author"), new TableField[] { Book.BOOK.AUTHOR_ID }, Keys.AUTHOR_PKEY, new TableField[] { Author.AUTHOR.ID }, true);
    public static final ForeignKey<BookRecord, GenreRecord> BOOK__FK_BOOK_GENRE = Internal.createForeignKey(Book.BOOK, DSL.name("fk_book_genre"), new TableField[] { Book.BOOK.GENRE_ID }, Keys.GENRE_PKEY, new TableField[] { Genre.GENRE.ID }, true);
    public static final ForeignKey<BookRecord, LanguageRecord> BOOK__FK_BOOK_LANGUAGE = Internal.createForeignKey(Book.BOOK, DSL.name("fk_book_language"), new TableField[] { Book.BOOK.LANGUAGE_ID }, Keys.LANGUAGE_PKEY, new TableField[] { Language.LANGUAGE.ID }, true);
    public static final ForeignKey<BookRecord, PublisherRecord> BOOK__FK_BOOK_PUBLISHER = Internal.createForeignKey(Book.BOOK, DSL.name("fk_book_publisher"), new TableField[] { Book.BOOK.PUBLISHER_ID }, Keys.PUBLISHER_PKEY, new TableField[] { Publisher.PUBLISHER.ID }, true);
    public static final ForeignKey<CityRecord, StateRecord> CITY__FK_CITY_STATE = Internal.createForeignKey(City.CITY, DSL.name("fk_city_state"), new TableField[] { City.CITY.STATE_ID }, Keys.STATE_PKEY, new TableField[] { State.STATE.ID }, true);
    public static final ForeignKey<CustomerRecord, AddressRecord> CUSTOMER__FK_CUSTOMER_ADDRESS = Internal.createForeignKey(Customer.CUSTOMER, DSL.name("fk_customer_address"), new TableField[] { Customer.CUSTOMER.ADDRESS_ID }, Keys.ADDRESS_PKEY, new TableField[] { Address.ADDRESS.ID }, true);
    public static final ForeignKey<EmployeeRecord, AddressRecord> EMPLOYEE__FK_EMPLOYEE_ADDRESS = Internal.createForeignKey(Employee.EMPLOYEE, DSL.name("fk_employee_address"), new TableField[] { Employee.EMPLOYEE.ADDRESS_ID }, Keys.ADDRESS_PKEY, new TableField[] { Address.ADDRESS.ID }, true);
    public static final ForeignKey<EmployeeRecord, ShopRecord> EMPLOYEE__FK_EMPLOYEE_SHOP = Internal.createForeignKey(Employee.EMPLOYEE, DSL.name("fk_employee_shop"), new TableField[] { Employee.EMPLOYEE.SHOP_ID }, Keys.SHOP_PKEY, new TableField[] { Shop.SHOP.ID }, true);
    public static final ForeignKey<InventoryitemRecord, BookRecord> INVENTORYITEM__FK_INVENTORY_ITEM_BOOK = Internal.createForeignKey(Inventoryitem.INVENTORYITEM, DSL.name("fk_inventory_item_book"), new TableField[] { Inventoryitem.INVENTORYITEM.BOOK_ID }, Keys.BOOK_PKEY, new TableField[] { Book.BOOK.ID }, true);
    public static final ForeignKey<InventoryitemRecord, ShopRecord> INVENTORYITEM__FK_INVENTORY_ITEM_SHOP = Internal.createForeignKey(Inventoryitem.INVENTORYITEM, DSL.name("fk_inventory_item_shop"), new TableField[] { Inventoryitem.INVENTORYITEM.SHOP_ID }, Keys.SHOP_PKEY, new TableField[] { Shop.SHOP.ID }, true);
    public static final ForeignKey<PublisherRecord, AddressRecord> PUBLISHER__FK_PUBLISHER_ADDRESS = Internal.createForeignKey(Publisher.PUBLISHER, DSL.name("fk_publisher_address"), new TableField[] { Publisher.PUBLISHER.ADDRESS_ID }, Keys.ADDRESS_PKEY, new TableField[] { Address.ADDRESS.ID }, true);
    public static final ForeignKey<PurchaseRecord, CustomerRecord> PURCHASE__FK_PURCHASE_CUSTOMER = Internal.createForeignKey(Purchase.PURCHASE, DSL.name("fk_purchase_customer"), new TableField[] { Purchase.PURCHASE.CUSTOMER_ID }, Keys.CUSTOMER_PKEY, new TableField[] { Customer.CUSTOMER.ID }, true);
    public static final ForeignKey<PurchaseRecord, EmployeeRecord> PURCHASE__FK_PURCHASE_EMPLOYEE = Internal.createForeignKey(Purchase.PURCHASE, DSL.name("fk_purchase_employee"), new TableField[] { Purchase.PURCHASE.EMPLOYEE_ID }, Keys.EMPLOYEE_PKEY, new TableField[] { Employee.EMPLOYEE.ID }, true);
    public static final ForeignKey<PurchaseRecord, ShopRecord> PURCHASE__FK_PURCHASE_SHOP = Internal.createForeignKey(Purchase.PURCHASE, DSL.name("fk_purchase_shop"), new TableField[] { Purchase.PURCHASE.SHOP_ID }, Keys.SHOP_PKEY, new TableField[] { Shop.SHOP.ID }, true);
    public static final ForeignKey<PurchaseitemRecord, BookRecord> PURCHASEITEM__FK_PURCHASE_ITEM_BOOK = Internal.createForeignKey(Purchaseitem.PURCHASEITEM, DSL.name("fk_purchase_item_book"), new TableField[] { Purchaseitem.PURCHASEITEM.BOOK_ID }, Keys.BOOK_PKEY, new TableField[] { Book.BOOK.ID }, true);
    public static final ForeignKey<PurchaseitemRecord, PurchaseRecord> PURCHASEITEM__FK_PURCHASE_ITEM_PURCHASE = Internal.createForeignKey(Purchaseitem.PURCHASEITEM, DSL.name("fk_purchase_item_purchase"), new TableField[] { Purchaseitem.PURCHASEITEM.PURCHASE_ID }, Keys.PURCHASE_PKEY, new TableField[] { Purchase.PURCHASE.ID }, true);
    public static final ForeignKey<ShopRecord, AddressRecord> SHOP__FK_SHOP_ADDRESS = Internal.createForeignKey(Shop.SHOP, DSL.name("fk_shop_address"), new TableField[] { Shop.SHOP.ADDRESS_ID }, Keys.ADDRESS_PKEY, new TableField[] { Address.ADDRESS.ID }, true);
    public static final ForeignKey<StateRecord, CountryRecord> STATE__FK_STATE_COUNTRY = Internal.createForeignKey(State.STATE, DSL.name("fk_state_country"), new TableField[] { State.STATE.COUNTRY_ID }, Keys.COUNTRY_PKEY, new TableField[] { Country.COUNTRY.ID }, true);
}
