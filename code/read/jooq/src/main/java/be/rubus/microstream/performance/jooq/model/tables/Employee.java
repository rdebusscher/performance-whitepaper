/*
 * This file is generated by jOOQ.
 */
package be.rubus.microstream.performance.jooq.model.tables;


import be.rubus.microstream.performance.jooq.model.Keys;
import be.rubus.microstream.performance.jooq.model.Public;
import be.rubus.microstream.performance.jooq.model.tables.records.EmployeeRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Employee extends TableImpl<EmployeeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.employee</code>
     */
    public static final Employee EMPLOYEE = new Employee();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeeRecord> getRecordType() {
        return EmployeeRecord.class;
    }

    /**
     * The column <code>public.employee.id</code>.
     */
    public final TableField<EmployeeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.employee.name</code>.
     */
    public final TableField<EmployeeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.employee.address_id</code>.
     */
    public final TableField<EmployeeRecord, Long> ADDRESS_ID = createField(DSL.name("address_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.employee.shop_id</code>.
     */
    public final TableField<EmployeeRecord, Long> SHOP_ID = createField(DSL.name("shop_id"), SQLDataType.BIGINT, this, "");

    private Employee(Name alias, Table<EmployeeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Employee(Name alias, Table<EmployeeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.employee</code> table reference
     */
    public Employee(String alias) {
        this(DSL.name(alias), EMPLOYEE);
    }

    /**
     * Create an aliased <code>public.employee</code> table reference
     */
    public Employee(Name alias) {
        this(alias, EMPLOYEE);
    }

    /**
     * Create a <code>public.employee</code> table reference
     */
    public Employee() {
        this(DSL.name("employee"), null);
    }

    public <O extends Record> Employee(Table<O> child, ForeignKey<O, EmployeeRecord> key) {
        super(child, key, EMPLOYEE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<EmployeeRecord, Long> getIdentity() {
        return (Identity<EmployeeRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EmployeeRecord> getPrimaryKey() {
        return Keys.EMPLOYEE_PKEY;
    }

    @Override
    public List<ForeignKey<EmployeeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EMPLOYEE__FK_EMPLOYEE_ADDRESS, Keys.EMPLOYEE__FK_EMPLOYEE_SHOP);
    }

    private transient Address _address;
    private transient Shop _shop;

    /**
     * Get the implicit join path to the <code>public.address</code> table.
     */
    public Address address() {
        if (_address == null)
            _address = new Address(this, Keys.EMPLOYEE__FK_EMPLOYEE_ADDRESS);

        return _address;
    }

    /**
     * Get the implicit join path to the <code>public.shop</code> table.
     */
    public Shop shop() {
        if (_shop == null)
            _shop = new Shop(this, Keys.EMPLOYEE__FK_EMPLOYEE_SHOP);

        return _shop;
    }

    @Override
    public Employee as(String alias) {
        return new Employee(DSL.name(alias), this);
    }

    @Override
    public Employee as(Name alias) {
        return new Employee(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Employee rename(String name) {
        return new Employee(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Employee rename(Name name) {
        return new Employee(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, Long, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
