/*
 * This file is generated by jOOQ.
 */
package be.rubus.microstream.performance.jooq.model.tables;


import be.rubus.microstream.performance.jooq.model.Keys;
import be.rubus.microstream.performance.jooq.model.Public;
import be.rubus.microstream.performance.jooq.model.tables.records.InventoryitemRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Inventoryitem extends TableImpl<InventoryitemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.inventoryitem</code>
     */
    public static final Inventoryitem INVENTORYITEM = new Inventoryitem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InventoryitemRecord> getRecordType() {
        return InventoryitemRecord.class;
    }

    /**
     * The column <code>public.inventoryitem.id</code>.
     */
    public final TableField<InventoryitemRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.inventoryitem.amount</code>.
     */
    public final TableField<InventoryitemRecord, Integer> AMOUNT = createField(DSL.name("amount"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.inventoryitem.book_id</code>.
     */
    public final TableField<InventoryitemRecord, Long> BOOK_ID = createField(DSL.name("book_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.inventoryitem.shop_id</code>.
     */
    public final TableField<InventoryitemRecord, Long> SHOP_ID = createField(DSL.name("shop_id"), SQLDataType.BIGINT, this, "");

    private Inventoryitem(Name alias, Table<InventoryitemRecord> aliased) {
        this(alias, aliased, null);
    }

    private Inventoryitem(Name alias, Table<InventoryitemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.inventoryitem</code> table reference
     */
    public Inventoryitem(String alias) {
        this(DSL.name(alias), INVENTORYITEM);
    }

    /**
     * Create an aliased <code>public.inventoryitem</code> table reference
     */
    public Inventoryitem(Name alias) {
        this(alias, INVENTORYITEM);
    }

    /**
     * Create a <code>public.inventoryitem</code> table reference
     */
    public Inventoryitem() {
        this(DSL.name("inventoryitem"), null);
    }

    public <O extends Record> Inventoryitem(Table<O> child, ForeignKey<O, InventoryitemRecord> key) {
        super(child, key, INVENTORYITEM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<InventoryitemRecord, Long> getIdentity() {
        return (Identity<InventoryitemRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<InventoryitemRecord> getPrimaryKey() {
        return Keys.INVENTORYITEM_PKEY;
    }

    @Override
    public List<ForeignKey<InventoryitemRecord, ?>> getReferences() {
        return Arrays.asList(Keys.INVENTORYITEM__FK_INVENTORY_ITEM_BOOK, Keys.INVENTORYITEM__FK_INVENTORY_ITEM_SHOP);
    }

    private transient Book _book;
    private transient Shop _shop;

    /**
     * Get the implicit join path to the <code>public.book</code> table.
     */
    public Book book() {
        if (_book == null)
            _book = new Book(this, Keys.INVENTORYITEM__FK_INVENTORY_ITEM_BOOK);

        return _book;
    }

    /**
     * Get the implicit join path to the <code>public.shop</code> table.
     */
    public Shop shop() {
        if (_shop == null)
            _shop = new Shop(this, Keys.INVENTORYITEM__FK_INVENTORY_ITEM_SHOP);

        return _shop;
    }

    @Override
    public Inventoryitem as(String alias) {
        return new Inventoryitem(DSL.name(alias), this);
    }

    @Override
    public Inventoryitem as(Name alias) {
        return new Inventoryitem(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Inventoryitem rename(String name) {
        return new Inventoryitem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Inventoryitem rename(Name name) {
        return new Inventoryitem(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Integer, Long, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
