/*
 * This file is generated by jOOQ.
 */
package be.rubus.microstream.performance.jooq.model.tables;


import be.rubus.microstream.performance.jooq.model.Keys;
import be.rubus.microstream.performance.jooq.model.Public;
import be.rubus.microstream.performance.jooq.model.tables.records.PublisherRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Publisher extends TableImpl<PublisherRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.publisher</code>
     */
    public static final Publisher PUBLISHER = new Publisher();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PublisherRecord> getRecordType() {
        return PublisherRecord.class;
    }

    /**
     * The column <code>public.publisher.id</code>.
     */
    public final TableField<PublisherRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.publisher.name</code>.
     */
    public final TableField<PublisherRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.publisher.address_id</code>.
     */
    public final TableField<PublisherRecord, Long> ADDRESS_ID = createField(DSL.name("address_id"), SQLDataType.BIGINT, this, "");

    private Publisher(Name alias, Table<PublisherRecord> aliased) {
        this(alias, aliased, null);
    }

    private Publisher(Name alias, Table<PublisherRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.publisher</code> table reference
     */
    public Publisher(String alias) {
        this(DSL.name(alias), PUBLISHER);
    }

    /**
     * Create an aliased <code>public.publisher</code> table reference
     */
    public Publisher(Name alias) {
        this(alias, PUBLISHER);
    }

    /**
     * Create a <code>public.publisher</code> table reference
     */
    public Publisher() {
        this(DSL.name("publisher"), null);
    }

    public <O extends Record> Publisher(Table<O> child, ForeignKey<O, PublisherRecord> key) {
        super(child, key, PUBLISHER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PublisherRecord, Long> getIdentity() {
        return (Identity<PublisherRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PublisherRecord> getPrimaryKey() {
        return Keys.PUBLISHER_PKEY;
    }

    @Override
    public List<ForeignKey<PublisherRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PUBLISHER__FK_PUBLISHER_ADDRESS);
    }

    private transient Address _address;

    /**
     * Get the implicit join path to the <code>public.address</code> table.
     */
    public Address address() {
        if (_address == null)
            _address = new Address(this, Keys.PUBLISHER__FK_PUBLISHER_ADDRESS);

        return _address;
    }

    @Override
    public Publisher as(String alias) {
        return new Publisher(DSL.name(alias), this);
    }

    @Override
    public Publisher as(Name alias) {
        return new Publisher(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Publisher rename(String name) {
        return new Publisher(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Publisher rename(Name name) {
        return new Publisher(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
