/*
 * This file is generated by jOOQ.
 */
package be.rubus.microstream.performance.jooq.model.tables;


import be.rubus.microstream.performance.jooq.model.Keys;
import be.rubus.microstream.performance.jooq.model.Public;
import be.rubus.microstream.performance.jooq.model.tables.records.StateRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class State extends TableImpl<StateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.state</code>
     */
    public static final State STATE = new State();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StateRecord> getRecordType() {
        return StateRecord.class;
    }

    /**
     * The column <code>public.state.id</code>.
     */
    public final TableField<StateRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.state.name</code>.
     */
    public final TableField<StateRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.state.country_id</code>.
     */
    public final TableField<StateRecord, Long> COUNTRY_ID = createField(DSL.name("country_id"), SQLDataType.BIGINT, this, "");

    private State(Name alias, Table<StateRecord> aliased) {
        this(alias, aliased, null);
    }

    private State(Name alias, Table<StateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.state</code> table reference
     */
    public State(String alias) {
        this(DSL.name(alias), STATE);
    }

    /**
     * Create an aliased <code>public.state</code> table reference
     */
    public State(Name alias) {
        this(alias, STATE);
    }

    /**
     * Create a <code>public.state</code> table reference
     */
    public State() {
        this(DSL.name("state"), null);
    }

    public <O extends Record> State(Table<O> child, ForeignKey<O, StateRecord> key) {
        super(child, key, STATE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<StateRecord, Long> getIdentity() {
        return (Identity<StateRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<StateRecord> getPrimaryKey() {
        return Keys.STATE_PKEY;
    }

    @Override
    public List<ForeignKey<StateRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STATE__FK_STATE_COUNTRY);
    }

    private transient Country _country;

    /**
     * Get the implicit join path to the <code>public.country</code> table.
     */
    public Country country() {
        if (_country == null)
            _country = new Country(this, Keys.STATE__FK_STATE_COUNTRY);

        return _country;
    }

    @Override
    public State as(String alias) {
        return new State(DSL.name(alias), this);
    }

    @Override
    public State as(Name alias) {
        return new State(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public State rename(String name) {
        return new State(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public State rename(Name name) {
        return new State(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
