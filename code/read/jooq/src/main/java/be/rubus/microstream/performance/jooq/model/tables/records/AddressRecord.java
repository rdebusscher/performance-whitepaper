/*
 * This file is generated by jOOQ.
 */
package be.rubus.microstream.performance.jooq.model.tables.records;


import be.rubus.microstream.performance.jooq.model.tables.Address;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AddressRecord extends UpdatableRecordImpl<AddressRecord> implements Record5<Long, String, String, String, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.address.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.address.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.address.address</code>.
     */
    public void setAddress(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.address.address</code>.
     */
    public String getAddress() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.address.address2</code>.
     */
    public void setAddress2(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.address.address2</code>.
     */
    public String getAddress2() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.address.zipcode</code>.
     */
    public void setZipcode(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.address.zipcode</code>.
     */
    public String getZipcode() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.address.city_id</code>.
     */
    public void setCityId(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.address.city_id</code>.
     */
    public Long getCityId() {
        return (Long) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String, String, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Long, String, String, String, Long> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Address.ADDRESS.ID;
    }

    @Override
    public Field<String> field2() {
        return Address.ADDRESS.ADDRESS_;
    }

    @Override
    public Field<String> field3() {
        return Address.ADDRESS.ADDRESS2;
    }

    @Override
    public Field<String> field4() {
        return Address.ADDRESS.ZIPCODE;
    }

    @Override
    public Field<Long> field5() {
        return Address.ADDRESS.CITY_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getAddress();
    }

    @Override
    public String component3() {
        return getAddress2();
    }

    @Override
    public String component4() {
        return getZipcode();
    }

    @Override
    public Long component5() {
        return getCityId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getAddress();
    }

    @Override
    public String value3() {
        return getAddress2();
    }

    @Override
    public String value4() {
        return getZipcode();
    }

    @Override
    public Long value5() {
        return getCityId();
    }

    @Override
    public AddressRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public AddressRecord value2(String value) {
        setAddress(value);
        return this;
    }

    @Override
    public AddressRecord value3(String value) {
        setAddress2(value);
        return this;
    }

    @Override
    public AddressRecord value4(String value) {
        setZipcode(value);
        return this;
    }

    @Override
    public AddressRecord value5(Long value) {
        setCityId(value);
        return this;
    }

    @Override
    public AddressRecord values(Long value1, String value2, String value3, String value4, Long value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AddressRecord
     */
    public AddressRecord() {
        super(Address.ADDRESS);
    }

    /**
     * Create a detached, initialised AddressRecord
     */
    public AddressRecord(Long id, String address, String address2, String zipcode, Long cityId) {
        super(Address.ADDRESS);

        setId(id);
        setAddress(address);
        setAddress2(address2);
        setZipcode(zipcode);
        setCityId(cityId);
    }
}
