/*
 * This file is generated by jOOQ.
 */
package be.rubus.microstream.performance.jooq.model.tables;


import be.rubus.microstream.performance.jooq.model.Indexes;
import be.rubus.microstream.performance.jooq.model.Keys;
import be.rubus.microstream.performance.jooq.model.Public;
import be.rubus.microstream.performance.jooq.model.tables.records.PurchaseitemRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Purchaseitem extends TableImpl<PurchaseitemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.purchaseitem</code>
     */
    public static final Purchaseitem PURCHASEITEM = new Purchaseitem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PurchaseitemRecord> getRecordType() {
        return PurchaseitemRecord.class;
    }

    /**
     * The column <code>public.purchaseitem.id</code>.
     */
    public final TableField<PurchaseitemRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.purchaseitem.amount</code>.
     */
    public final TableField<PurchaseitemRecord, Integer> AMOUNT = createField(DSL.name("amount"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.purchaseitem.price</code>.
     */
    public final TableField<PurchaseitemRecord, Double> PRICE = createField(DSL.name("price"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.purchaseitem.book_id</code>.
     */
    public final TableField<PurchaseitemRecord, Long> BOOK_ID = createField(DSL.name("book_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.purchaseitem.purchase_id</code>.
     */
    public final TableField<PurchaseitemRecord, Long> PURCHASE_ID = createField(DSL.name("purchase_id"), SQLDataType.BIGINT, this, "");

    private Purchaseitem(Name alias, Table<PurchaseitemRecord> aliased) {
        this(alias, aliased, null);
    }

    private Purchaseitem(Name alias, Table<PurchaseitemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.purchaseitem</code> table reference
     */
    public Purchaseitem(String alias) {
        this(DSL.name(alias), PURCHASEITEM);
    }

    /**
     * Create an aliased <code>public.purchaseitem</code> table reference
     */
    public Purchaseitem(Name alias) {
        this(alias, PURCHASEITEM);
    }

    /**
     * Create a <code>public.purchaseitem</code> table reference
     */
    public Purchaseitem() {
        this(DSL.name("purchaseitem"), null);
    }

    public <O extends Record> Purchaseitem(Table<O> child, ForeignKey<O, PurchaseitemRecord> key) {
        super(child, key, PURCHASEITEM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_PURCHASE_ITEM_PURCHASE_ID);
    }

    @Override
    public Identity<PurchaseitemRecord, Long> getIdentity() {
        return (Identity<PurchaseitemRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PurchaseitemRecord> getPrimaryKey() {
        return Keys.PURCHASEITEM_PKEY;
    }

    @Override
    public List<ForeignKey<PurchaseitemRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PURCHASEITEM__FK_PURCHASE_ITEM_BOOK, Keys.PURCHASEITEM__FK_PURCHASE_ITEM_PURCHASE);
    }

    private transient Book _book;
    private transient Purchase _purchase;

    /**
     * Get the implicit join path to the <code>public.book</code> table.
     */
    public Book book() {
        if (_book == null)
            _book = new Book(this, Keys.PURCHASEITEM__FK_PURCHASE_ITEM_BOOK);

        return _book;
    }

    /**
     * Get the implicit join path to the <code>public.purchase</code> table.
     */
    public Purchase purchase() {
        if (_purchase == null)
            _purchase = new Purchase(this, Keys.PURCHASEITEM__FK_PURCHASE_ITEM_PURCHASE);

        return _purchase;
    }

    @Override
    public Purchaseitem as(String alias) {
        return new Purchaseitem(DSL.name(alias), this);
    }

    @Override
    public Purchaseitem as(Name alias) {
        return new Purchaseitem(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Purchaseitem rename(String name) {
        return new Purchaseitem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Purchaseitem rename(Name name) {
        return new Purchaseitem(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Integer, Double, Long, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
